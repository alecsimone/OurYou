# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Query {
  verifyMember(id: ID!, code: String!): Member
  getProfileSidebarData(id: ID): Member
  members(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  member(where: MemberWhereUniqueInput!): Member
  membersCount(where: MemberWhereInput! = {}): Int
  things(
    where: ThingWhereInput! = {}
    orderBy: [ThingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Thing!]
  thing(where: ThingWhereUniqueInput!): Thing
  thingsCount(where: ThingWhereInput! = {}): Int
  contentPieces(
    where: ContentPieceWhereInput! = {}
    orderBy: [ContentPieceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ContentPiece!]
  contentPiece(where: ContentPieceWhereUniqueInput!): ContentPiece
  contentPiecesCount(where: ContentPieceWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  votes(
    where: VoteWhereInput! = {}
    orderBy: [VoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vote!]
  vote(where: VoteWhereUniqueInput!): Vote
  votesCount(where: VoteWhereInput! = {}): Int
  connections(
    where: ConnectionWhereInput! = {}
    orderBy: [ConnectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Connection!]
  connection(where: ConnectionWhereUniqueInput!): Connection
  connectionsCount(where: ConnectionWhereInput! = {}): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  comment(where: CommentWhereUniqueInput!): Comment
  commentsCount(where: CommentWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateMemberPasswordResetToken(
    email: String!
    token: String!
  ): ValidateMemberPasswordResetTokenResult
}

type Mutation {
  setAvatar(newAvatarLink: String, uploadedAvatar: [Upload]): Member
  createMember(data: MemberCreateInput!): Member
  createMembers(data: [MemberCreateInput!]!): [Member]
  updateMember(where: MemberWhereUniqueInput!, data: MemberUpdateInput!): Member
  updateMembers(data: [MemberUpdateArgs!]!): [Member]
  deleteMember(where: MemberWhereUniqueInput!): Member
  deleteMembers(where: [MemberWhereUniqueInput!]!): [Member]
  createThing(data: ThingCreateInput!): Thing
  createThings(data: [ThingCreateInput!]!): [Thing]
  updateThing(where: ThingWhereUniqueInput!, data: ThingUpdateInput!): Thing
  updateThings(data: [ThingUpdateArgs!]!): [Thing]
  deleteThing(where: ThingWhereUniqueInput!): Thing
  deleteThings(where: [ThingWhereUniqueInput!]!): [Thing]
  createContentPiece(data: ContentPieceCreateInput!): ContentPiece
  createContentPieces(data: [ContentPieceCreateInput!]!): [ContentPiece]
  updateContentPiece(
    where: ContentPieceWhereUniqueInput!
    data: ContentPieceUpdateInput!
  ): ContentPiece
  updateContentPieces(data: [ContentPieceUpdateArgs!]!): [ContentPiece]
  deleteContentPiece(where: ContentPieceWhereUniqueInput!): ContentPiece
  deleteContentPieces(where: [ContentPieceWhereUniqueInput!]!): [ContentPiece]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createVote(data: VoteCreateInput!): Vote
  createVotes(data: [VoteCreateInput!]!): [Vote]
  updateVote(where: VoteWhereUniqueInput!, data: VoteUpdateInput!): Vote
  updateVotes(data: [VoteUpdateArgs!]!): [Vote]
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteVotes(where: [VoteWhereUniqueInput!]!): [Vote]
  createConnection(data: ConnectionCreateInput!): Connection
  createConnections(data: [ConnectionCreateInput!]!): [Connection]
  updateConnection(
    where: ConnectionWhereUniqueInput!
    data: ConnectionUpdateInput!
  ): Connection
  updateConnections(data: [ConnectionUpdateArgs!]!): [Connection]
  deleteConnection(where: ConnectionWhereUniqueInput!): Connection
  deleteConnections(where: [ConnectionWhereUniqueInput!]!): [Connection]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(
    where: CommentWhereUniqueInput!
    data: CommentUpdateInput!
  ): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  endSession: Boolean!
  authenticateMemberWithPassword(
    email: String!
    password: String!
  ): MemberAuthenticationWithPasswordResult
  createInitialMember(
    data: CreateInitialMemberInput!
  ): MemberAuthenticationWithPasswordSuccess!
  sendMemberPasswordResetLink(email: String!): Boolean!
  redeemMemberPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemMemberPasswordResetTokenResult
}

type Member {
  id: ID!
  email: String
  displayName: String
  avatar: String
  avatarUpload: CloudinaryImage_File
  password: PasswordState
  role: String
  rep: Int
  giveableRep: Int
  defaultPrivacy: String
  friendsA(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  friendsACount(where: MemberWhereInput! = {}): Int
  friendsB(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  friendsBCount(where: MemberWhereInput! = {}): Int
  twitchName: String
  votes(
    where: VoteWhereInput! = {}
    orderBy: [VoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vote!]
  votesCount(where: VoteWhereInput! = {}): Int
  createdThings(
    where: ThingWhereInput! = {}
    orderBy: [ThingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Thing!]
  createdThingsCount(where: ThingWhereInput! = {}): Int
  ownedTags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  ownedTagsCount(where: TagWhereInput! = {}): Int
  individualThingViewPermissions(
    where: ThingWhereInput! = {}
    orderBy: [ThingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Thing!]
  individualThingViewPermissionsCount(where: ThingWhereInput! = {}): Int
  individualContentPieceViewPermissions(
    where: ContentPieceWhereInput! = {}
    orderBy: [ContentPieceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ContentPiece!]
  individualContentPieceViewPermissionsCount(
    where: ContentPieceWhereInput! = {}
  ): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  verificationToken: String
  twitterUserName: String
  createdConnections(
    where: ConnectionWhereInput! = {}
    orderBy: [ConnectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Connection!]
  createdConnectionsCount(where: ConnectionWhereInput! = {}): Int
  createdAt: DateTime
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
  Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input MemberWhereUniqueInput {
  id: ID
  email: String
  displayName: String
}

input MemberWhereInput {
  AND: [MemberWhereInput!]
  OR: [MemberWhereInput!]
  NOT: [MemberWhereInput!]
  id: IDFilter
  email: StringFilter
  displayName: StringFilter
  avatar: StringFilter
  password: PasswordFilter
  role: StringFilter
  rep: IntNullableFilter
  giveableRep: IntNullableFilter
  defaultPrivacy: StringFilter
  friendsA: MemberManyRelationFilter
  friendsB: MemberManyRelationFilter
  twitchName: StringFilter
  votes: VoteManyRelationFilter
  createdThings: ThingManyRelationFilter
  ownedTags: TagManyRelationFilter
  individualThingViewPermissions: ThingManyRelationFilter
  individualContentPieceViewPermissions: ContentPieceManyRelationFilter
  comments: CommentManyRelationFilter
  verificationToken: StringFilter
  twitterUserName: StringFilter
  createdConnections: ConnectionManyRelationFilter
  createdAt: DateTimeNullableFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input MemberManyRelationFilter {
  every: MemberWhereInput
  some: MemberWhereInput
  none: MemberWhereInput
}

input VoteManyRelationFilter {
  every: VoteWhereInput
  some: VoteWhereInput
  none: VoteWhereInput
}

input ThingManyRelationFilter {
  every: ThingWhereInput
  some: ThingWhereInput
  none: ThingWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input ContentPieceManyRelationFilter {
  every: ContentPieceWhereInput
  some: ContentPieceWhereInput
  none: ContentPieceWhereInput
}

input CommentManyRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input ConnectionManyRelationFilter {
  every: ConnectionWhereInput
  some: ConnectionWhereInput
  none: ConnectionWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input MemberOrderByInput {
  id: OrderDirection
  email: OrderDirection
  displayName: OrderDirection
  avatar: OrderDirection
  role: OrderDirection
  rep: OrderDirection
  giveableRep: OrderDirection
  defaultPrivacy: OrderDirection
  twitchName: OrderDirection
  verificationToken: OrderDirection
  twitterUserName: OrderDirection
  createdAt: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input MemberUpdateInput {
  email: String
  displayName: String
  avatar: String
  avatarUpload: Upload
  password: String
  role: String
  rep: Int
  giveableRep: Int
  defaultPrivacy: String
  friendsA: MemberRelateToManyForUpdateInput
  friendsB: MemberRelateToManyForUpdateInput
  twitchName: String
  votes: VoteRelateToManyForUpdateInput
  createdThings: ThingRelateToManyForUpdateInput
  ownedTags: TagRelateToManyForUpdateInput
  individualThingViewPermissions: ThingRelateToManyForUpdateInput
  individualContentPieceViewPermissions: ContentPieceRelateToManyForUpdateInput
  comments: CommentRelateToManyForUpdateInput
  verificationToken: String
  twitterUserName: String
  createdConnections: ConnectionRelateToManyForUpdateInput
  createdAt: DateTime
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input MemberRelateToManyForUpdateInput {
  disconnect: [MemberWhereUniqueInput!]
  set: [MemberWhereUniqueInput!]
  create: [MemberCreateInput!]
  connect: [MemberWhereUniqueInput!]
}

input VoteRelateToManyForUpdateInput {
  disconnect: [VoteWhereUniqueInput!]
  set: [VoteWhereUniqueInput!]
  create: [VoteCreateInput!]
  connect: [VoteWhereUniqueInput!]
}

input ThingRelateToManyForUpdateInput {
  disconnect: [ThingWhereUniqueInput!]
  set: [ThingWhereUniqueInput!]
  create: [ThingCreateInput!]
  connect: [ThingWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ContentPieceRelateToManyForUpdateInput {
  disconnect: [ContentPieceWhereUniqueInput!]
  set: [ContentPieceWhereUniqueInput!]
  create: [ContentPieceCreateInput!]
  connect: [ContentPieceWhereUniqueInput!]
}

input CommentRelateToManyForUpdateInput {
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input ConnectionRelateToManyForUpdateInput {
  disconnect: [ConnectionWhereUniqueInput!]
  set: [ConnectionWhereUniqueInput!]
  create: [ConnectionCreateInput!]
  connect: [ConnectionWhereUniqueInput!]
}

input MemberUpdateArgs {
  where: MemberWhereUniqueInput!
  data: MemberUpdateInput!
}

input MemberCreateInput {
  email: String
  displayName: String
  avatar: String
  avatarUpload: Upload
  password: String
  role: String
  rep: Int
  giveableRep: Int
  defaultPrivacy: String
  friendsA: MemberRelateToManyForCreateInput
  friendsB: MemberRelateToManyForCreateInput
  twitchName: String
  votes: VoteRelateToManyForCreateInput
  createdThings: ThingRelateToManyForCreateInput
  ownedTags: TagRelateToManyForCreateInput
  individualThingViewPermissions: ThingRelateToManyForCreateInput
  individualContentPieceViewPermissions: ContentPieceRelateToManyForCreateInput
  comments: CommentRelateToManyForCreateInput
  verificationToken: String
  twitterUserName: String
  createdConnections: ConnectionRelateToManyForCreateInput
  createdAt: DateTime
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input MemberRelateToManyForCreateInput {
  create: [MemberCreateInput!]
  connect: [MemberWhereUniqueInput!]
}

input VoteRelateToManyForCreateInput {
  create: [VoteCreateInput!]
  connect: [VoteWhereUniqueInput!]
}

input ThingRelateToManyForCreateInput {
  create: [ThingCreateInput!]
  connect: [ThingWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ContentPieceRelateToManyForCreateInput {
  create: [ContentPieceCreateInput!]
  connect: [ContentPieceWhereUniqueInput!]
}

input CommentRelateToManyForCreateInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input ConnectionRelateToManyForCreateInput {
  create: [ConnectionCreateInput!]
  connect: [ConnectionWhereUniqueInput!]
}

type Thing {
  id: ID!
  title: String
  author: Member
  featuredImage: String
  poster: String
  color: String
  privacy: String
  individualViewers(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  individualViewersCount(where: MemberWhereInput! = {}): Int
  votes(
    where: VoteWhereInput! = {}
    orderBy: [VoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vote!]
  votesCount(where: VoteWhereInput! = {}): Int
  score: Int
  partOfTags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  partOfTagsCount(where: TagWhereInput! = {}): Int
  content(
    where: ContentPieceWhereInput! = {}
    orderBy: [ContentPieceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ContentPiece!]
  contentCount(where: ContentPieceWhereInput! = {}): Int
  contentOrder: String
  unsavedNewContent: String
  addToStartUnsavedNewContent: String
  copiedInContent(
    where: ContentPieceWhereInput! = {}
    orderBy: [ContentPieceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ContentPiece!]
  copiedInContentCount(where: ContentPieceWhereInput! = {}): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  subjectConnections(
    where: ConnectionWhereInput! = {}
    orderBy: [ConnectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Connection!]
  subjectConnectionsCount(where: ConnectionWhereInput! = {}): Int
  objectConnections(
    where: ConnectionWhereInput! = {}
    orderBy: [ConnectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Connection!]
  objectConnectionsCount(where: ConnectionWhereInput! = {}): Int
  updatedAt: DateTime
  createdAt: DateTime
}

input ThingWhereUniqueInput {
  id: ID
}

input ThingWhereInput {
  AND: [ThingWhereInput!]
  OR: [ThingWhereInput!]
  NOT: [ThingWhereInput!]
  id: IDFilter
  title: StringFilter
  author: MemberWhereInput
  featuredImage: StringNullableFilter
  poster: StringNullableFilter
  color: StringFilter
  privacy: StringFilter
  individualViewers: MemberManyRelationFilter
  votes: VoteManyRelationFilter
  score: IntFilter
  partOfTags: TagManyRelationFilter
  content: ContentPieceManyRelationFilter
  contentOrder: StringFilter
  unsavedNewContent: StringNullableFilter
  addToStartUnsavedNewContent: StringNullableFilter
  copiedInContent: ContentPieceManyRelationFilter
  comments: CommentManyRelationFilter
  subjectConnections: ConnectionManyRelationFilter
  objectConnections: ConnectionManyRelationFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input ThingOrderByInput {
  id: OrderDirection
  title: OrderDirection
  featuredImage: OrderDirection
  poster: OrderDirection
  color: OrderDirection
  privacy: OrderDirection
  score: OrderDirection
  unsavedNewContent: OrderDirection
  addToStartUnsavedNewContent: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input ThingUpdateInput {
  title: String
  author: MemberRelateToOneForUpdateInput
  featuredImage: String
  poster: String
  color: String
  privacy: String
  individualViewers: MemberRelateToManyForUpdateInput
  votes: VoteRelateToManyForUpdateInput
  score: Int
  partOfTags: TagRelateToManyForUpdateInput
  content: ContentPieceRelateToManyForUpdateInput
  contentOrder: String
  unsavedNewContent: String
  addToStartUnsavedNewContent: String
  copiedInContent: ContentPieceRelateToManyForUpdateInput
  comments: CommentRelateToManyForUpdateInput
  subjectConnections: ConnectionRelateToManyForUpdateInput
  objectConnections: ConnectionRelateToManyForUpdateInput
  updatedAt: DateTime
  createdAt: DateTime
}

input MemberRelateToOneForUpdateInput {
  create: MemberCreateInput
  connect: MemberWhereUniqueInput
  disconnect: Boolean
}

input ThingUpdateArgs {
  where: ThingWhereUniqueInput!
  data: ThingUpdateInput!
}

input ThingCreateInput {
  title: String
  author: MemberRelateToOneForCreateInput
  featuredImage: String
  poster: String
  color: String
  privacy: String
  individualViewers: MemberRelateToManyForCreateInput
  votes: VoteRelateToManyForCreateInput
  score: Int
  partOfTags: TagRelateToManyForCreateInput
  content: ContentPieceRelateToManyForCreateInput
  contentOrder: String
  unsavedNewContent: String
  addToStartUnsavedNewContent: String
  copiedInContent: ContentPieceRelateToManyForCreateInput
  comments: CommentRelateToManyForCreateInput
  subjectConnections: ConnectionRelateToManyForCreateInput
  objectConnections: ConnectionRelateToManyForCreateInput
  updatedAt: DateTime
  createdAt: DateTime
}

input MemberRelateToOneForCreateInput {
  create: MemberCreateInput
  connect: MemberWhereUniqueInput
}

type ContentPiece {
  id: ID!
  content: String
  unsavedNewContent: String
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  onThing: Thing
  copiedToThings(
    where: ThingWhereInput! = {}
    orderBy: [ThingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Thing!]
  copiedToThingsCount(where: ThingWhereInput! = {}): Int
  onTag: Tag
  votes(
    where: VoteWhereInput! = {}
    orderBy: [VoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vote!]
  votesCount(where: VoteWhereInput! = {}): Int
  score: Int
  privacy: String
  individualViewers(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  individualViewersCount(where: MemberWhereInput! = {}): Int
  createdAt: DateTime
}

input ContentPieceWhereUniqueInput {
  id: ID
}

input ContentPieceWhereInput {
  AND: [ContentPieceWhereInput!]
  OR: [ContentPieceWhereInput!]
  NOT: [ContentPieceWhereInput!]
  id: IDFilter
  content: StringFilter
  unsavedNewContent: StringNullableFilter
  comments: CommentManyRelationFilter
  onThing: ThingWhereInput
  copiedToThings: ThingManyRelationFilter
  onTag: TagWhereInput
  votes: VoteManyRelationFilter
  score: IntFilter
  privacy: StringFilter
  individualViewers: MemberManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input ContentPieceOrderByInput {
  id: OrderDirection
  content: OrderDirection
  unsavedNewContent: OrderDirection
  score: OrderDirection
  privacy: OrderDirection
  createdAt: OrderDirection
}

input ContentPieceUpdateInput {
  content: String
  unsavedNewContent: String
  comments: CommentRelateToManyForUpdateInput
  onThing: ThingRelateToOneForUpdateInput
  copiedToThings: ThingRelateToManyForUpdateInput
  onTag: TagRelateToOneForUpdateInput
  votes: VoteRelateToManyForUpdateInput
  score: Int
  privacy: String
  individualViewers: MemberRelateToManyForUpdateInput
  createdAt: DateTime
}

input ThingRelateToOneForUpdateInput {
  create: ThingCreateInput
  connect: ThingWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToOneForUpdateInput {
  create: TagCreateInput
  connect: TagWhereUniqueInput
  disconnect: Boolean
}

input ContentPieceUpdateArgs {
  where: ContentPieceWhereUniqueInput!
  data: ContentPieceUpdateInput!
}

input ContentPieceCreateInput {
  content: String
  unsavedNewContent: String
  comments: CommentRelateToManyForCreateInput
  onThing: ThingRelateToOneForCreateInput
  copiedToThings: ThingRelateToManyForCreateInput
  onTag: TagRelateToOneForCreateInput
  votes: VoteRelateToManyForCreateInput
  score: Int
  privacy: String
  individualViewers: MemberRelateToManyForCreateInput
  createdAt: DateTime
}

input ThingRelateToOneForCreateInput {
  create: ThingCreateInput
  connect: ThingWhereUniqueInput
}

input TagRelateToOneForCreateInput {
  create: TagCreateInput
  connect: TagWhereUniqueInput
}

type Tag {
  id: ID!
  title: String
  author: Member
  featuredImage: String
  poster: String
  color: String
  content(
    where: ContentPieceWhereInput! = {}
    orderBy: [ContentPieceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ContentPiece!]
  contentCount(where: ContentPieceWhereInput! = {}): Int
  connectedThings(
    where: ThingWhereInput! = {}
    orderBy: [ThingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Thing!]
  connectedThingsCount(where: ThingWhereInput! = {}): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentsCount(where: CommentWhereInput! = {}): Int
  createdAt: DateTime
}

input TagWhereUniqueInput {
  id: ID
  title: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  title: StringFilter
  author: MemberWhereInput
  featuredImage: StringFilter
  poster: StringFilter
  color: StringFilter
  content: ContentPieceManyRelationFilter
  connectedThings: ThingManyRelationFilter
  comments: CommentManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input TagOrderByInput {
  id: OrderDirection
  title: OrderDirection
  featuredImage: OrderDirection
  poster: OrderDirection
  color: OrderDirection
  createdAt: OrderDirection
}

input TagUpdateInput {
  title: String
  author: MemberRelateToOneForUpdateInput
  featuredImage: String
  poster: String
  color: String
  content: ContentPieceRelateToManyForUpdateInput
  connectedThings: ThingRelateToManyForUpdateInput
  comments: CommentRelateToManyForUpdateInput
  createdAt: DateTime
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  title: String
  author: MemberRelateToOneForCreateInput
  featuredImage: String
  poster: String
  color: String
  content: ContentPieceRelateToManyForCreateInput
  connectedThings: ThingRelateToManyForCreateInput
  comments: CommentRelateToManyForCreateInput
  createdAt: DateTime
}

type Vote {
  id: ID!
  voter: Member
  onThing: Thing
  onComment: Comment
  onContentPiece: ContentPiece
  value: Int
  createdAt: DateTime
}

input VoteWhereUniqueInput {
  id: ID
}

input VoteWhereInput {
  AND: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
  id: IDFilter
  voter: MemberWhereInput
  onThing: ThingWhereInput
  onComment: CommentWhereInput
  onContentPiece: ContentPieceWhereInput
  value: IntFilter
  createdAt: DateTimeNullableFilter
}

input VoteOrderByInput {
  id: OrderDirection
  value: OrderDirection
  createdAt: OrderDirection
}

input VoteUpdateInput {
  voter: MemberRelateToOneForUpdateInput
  onThing: ThingRelateToOneForUpdateInput
  onComment: CommentRelateToOneForUpdateInput
  onContentPiece: ContentPieceRelateToOneForUpdateInput
  value: Int
  createdAt: DateTime
}

input CommentRelateToOneForUpdateInput {
  create: CommentCreateInput
  connect: CommentWhereUniqueInput
  disconnect: Boolean
}

input ContentPieceRelateToOneForUpdateInput {
  create: ContentPieceCreateInput
  connect: ContentPieceWhereUniqueInput
  disconnect: Boolean
}

input VoteUpdateArgs {
  where: VoteWhereUniqueInput!
  data: VoteUpdateInput!
}

input VoteCreateInput {
  voter: MemberRelateToOneForCreateInput
  onThing: ThingRelateToOneForCreateInput
  onComment: CommentRelateToOneForCreateInput
  onContentPiece: ContentPieceRelateToOneForCreateInput
  value: Int
  createdAt: DateTime
}

input CommentRelateToOneForCreateInput {
  create: CommentCreateInput
  connect: CommentWhereUniqueInput
}

input ContentPieceRelateToOneForCreateInput {
  create: ContentPieceCreateInput
  connect: ContentPieceWhereUniqueInput
}

type Connection {
  id: ID!
  creator: Member
  subject: Thing
  object: Thing
  relationship: String
  strength: Int
  isBlocked: Boolean
  createdAt: DateTime
}

input ConnectionWhereUniqueInput {
  id: ID
}

input ConnectionWhereInput {
  AND: [ConnectionWhereInput!]
  OR: [ConnectionWhereInput!]
  NOT: [ConnectionWhereInput!]
  id: IDFilter
  creator: MemberWhereInput
  subject: ThingWhereInput
  object: ThingWhereInput
  relationship: StringFilter
  strength: IntFilter
  isBlocked: BooleanFilter
  createdAt: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ConnectionOrderByInput {
  id: OrderDirection
  relationship: OrderDirection
  strength: OrderDirection
  isBlocked: OrderDirection
  createdAt: OrderDirection
}

input ConnectionUpdateInput {
  creator: MemberRelateToOneForUpdateInput
  subject: ThingRelateToOneForUpdateInput
  object: ThingRelateToOneForUpdateInput
  relationship: String
  strength: Int
  isBlocked: Boolean
  createdAt: DateTime
}

input ConnectionUpdateArgs {
  where: ConnectionWhereUniqueInput!
  data: ConnectionUpdateInput!
}

input ConnectionCreateInput {
  creator: MemberRelateToOneForCreateInput
  subject: ThingRelateToOneForCreateInput
  object: ThingRelateToOneForCreateInput
  relationship: String
  strength: Int
  isBlocked: Boolean
  createdAt: DateTime
}

type Comment {
  id: ID!
  author: Member
  comment: String
  onThing: Thing
  onContentPiece: ContentPiece
  onTag: Tag
  replies(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  repliesCount(where: CommentWhereInput! = {}): Int
  replyTo: Comment
  votes(
    where: VoteWhereInput! = {}
    orderBy: [VoteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vote!]
  votesCount(where: VoteWhereInput! = {}): Int
  score: Int
  createdAt: DateTime
}

input CommentWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  author: MemberWhereInput
  comment: StringFilter
  onThing: ThingWhereInput
  onContentPiece: ContentPieceWhereInput
  onTag: TagWhereInput
  replies: CommentManyRelationFilter
  replyTo: CommentWhereInput
  votes: VoteManyRelationFilter
  score: IntFilter
  createdAt: DateTimeNullableFilter
}

input CommentOrderByInput {
  id: OrderDirection
  comment: OrderDirection
  score: OrderDirection
  createdAt: OrderDirection
}

input CommentUpdateInput {
  author: MemberRelateToOneForUpdateInput
  comment: String
  onThing: ThingRelateToOneForUpdateInput
  onContentPiece: ContentPieceRelateToOneForUpdateInput
  onTag: TagRelateToOneForUpdateInput
  replies: CommentRelateToManyForUpdateInput
  replyTo: CommentRelateToOneForUpdateInput
  votes: VoteRelateToManyForUpdateInput
  score: Int
  createdAt: DateTime
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  author: MemberRelateToOneForCreateInput
  comment: String
  onThing: ThingRelateToOneForCreateInput
  onContentPiece: ContentPieceRelateToOneForCreateInput
  onTag: TagRelateToOneForCreateInput
  replies: CommentRelateToManyForCreateInput
  replyTo: CommentRelateToOneForCreateInput
  votes: VoteRelateToManyForCreateInput
  score: Int
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

union MemberAuthenticationWithPasswordResult =
    MemberAuthenticationWithPasswordSuccess
  | MemberAuthenticationWithPasswordFailure

type MemberAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: Member!
}

type MemberAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialMemberInput {
  email: String
  displayName: String
  password: String
}

type RedeemMemberPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

union AuthenticatedItem = Member

type ValidateMemberPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
